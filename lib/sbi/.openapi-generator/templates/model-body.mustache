{{#models}}{{#model}}
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include "{{classname}}.h"

{{#isEnum}}
    char* {{classname}}_ToString({{classVarName}}_{{enumName}}e {{classname}}) {
        char *{{classname}}Array[] =  { "NULL"{{#allowableValues}}{{#enumVars}}, "{{{value}}}"{{/enumVars}}{{/allowableValues}} };
        return {{classname}}Array[{{classname}}];
    }

    {{classVarName}}_{{enumName}}e {{classname}}_FromString(char* {{classname}}) {
        int stringToReturn = 0;
        char *{{classname}}Array[] =  { "NULL"{{#allowableValues}}{{#enumVars}}, "{{{value}}}"{{/enumVars}}{{/allowableValues}} };
        size_t sizeofArray = sizeof({{classname}}Array) / sizeof({{classname}}Array[0]);
        while(stringToReturn < sizeofArray) {
            if(strcmp({{classname}}, {{classname}}Array[stringToReturn]) == 0) {
                return stringToReturn;
            }
            stringToReturn++;
        }
        return 0;
    }
{{/isEnum}}
{{^isEnum}}
{{#vars}}
    {{^isContainer}}
        {{#isPrimitiveType}}
            {{#isEnum}}
                char* {{name}}{{classname}}_ToString({{classVarName}}_{{name}}_e {{name}}) {
                    char* {{name}}Array[] =  { "NULL"{{#allowableValues}}{{#enumVars}}, "{{{value}}}"{{/enumVars}}{{/allowableValues}} };
                    return {{name}}Array[{{name}}];
                }

                {{classVarName}}_{{name}}_e {{name}}{{classname}}_FromString(char* {{name}}){
                    int stringToReturn = 0;
                    char *{{name}}Array[] =  { "NULL"{{#allowableValues}}{{#enumVars}}, "{{{value}}}"{{/enumVars}}{{/allowableValues}} };
                    size_t sizeofArray = sizeof({{name}}Array) / sizeof({{name}}Array[0]);
                    while(stringToReturn < sizeofArray) {
                        if(strcmp({{name}}, {{name}}Array[stringToReturn]) == 0) {
                            return stringToReturn;
                        }
                        stringToReturn++;
                    }
                    return 0;
                }
            {{/isEnum}}
        {{/isPrimitiveType}}
    {{/isContainer}}
{{/vars}}
{{classname}}_t *{{classname}}_create(
{{#vars}}
    {{^isContainer}}
        {{^isPrimitiveType}}
            {{#isEnum}}
                {{datatype}}_e {{name}}{{#hasMore}},{{/hasMore}}
            {{/isEnum}}
            {{^isEnum}}
                {{#isModel}}
                    {{datatype}}_t *{{name}}{{#hasMore}},{{/hasMore}}
                {{/isModel}}
                {{#isUuid}}
                    {{datatype}} *{{name}}{{#hasMore}},{{/hasMore}}
                {{/isUuid}}
                {{#isEmail}}
                    {{datatype}} *{{name}}{{#hasMore}},{{/hasMore}}
                {{/isEmail}}
                {{#isFreeFormObject}}
                    {{datatype}}_t *{{name}}{{#hasMore}},{{/hasMore}}
                {{/isFreeFormObject}}
            {{/isEnum}}
        {{/isPrimitiveType}}
        {{#isPrimitiveType}}
            {{#isEnum}}
                {{classVarName}}_{{name}}_e {{name}}{{#hasMore}},{{/hasMore}}
            {{/isEnum}}
            {{^isEnum}}
                {{#isNumeric}}
                    {{datatype}} {{name}}{{#hasMore}},{{/hasMore}}
                {{/isNumeric}}
                {{#isBoolean}}
                    {{datatype}} {{name}}{{#hasMore}},{{/hasMore}}
                {{/isBoolean}}
                {{#isString}}
                    {{datatype}} *{{name}}{{#hasMore}},{{/hasMore}}
                {{/isString}}
            {{/isEnum}}
            {{#isByteArray}}
                {{datatype}} {{name}}{{#hasMore}},{{/hasMore}}
            {{/isByteArray}}
            {{#isBinary}}
                {{datatype}} {{name}}{{#hasMore}},{{/hasMore}}
            {{/isBinary}}
            {{#isDate}}
                {{datatype}} *{{name}}{{#hasMore}},{{/hasMore}}
            {{/isDate}}
            {{#isDateTime}}
                {{datatype}} *{{name}}{{#hasMore}},{{/hasMore}}
            {{/isDateTime}}
        {{/isPrimitiveType}}
    {{/isContainer}}
    {{#isContainer}}
        {{#isListContainer}}
            {{datatype}}_t *{{name}}{{#hasMore}},{{/hasMore}}
        {{/isListContainer}}
        {{#isMapContainer}}
            {{datatype}} {{name}}{{#hasMore}},{{/hasMore}}
        {{/isMapContainer}}
    {{/isContainer}}
{{/vars}})
{
    {{classname}}_t *{{classname}}_local_var = ogs_malloc(sizeof({{classname}}_t));
    if (!{{classname}}_local_var) {
        return NULL;
    }
{{#vars}}
    {{classname}}_local_var->{{{name}}} = {{{name}}};
{{/vars}}

    return {{classname}}_local_var;
}

void {{classname}}_free({{classname}}_t *{{classname}})
{
    if(NULL == {{classname}}){
        return ;
    }
    listEntry_t *listEntry;
{{#vars}}
    {{^isContainer}}
        {{^isPrimitiveType}}
            {{^isEnum}}
                {{#isModel}}
                    {{{complexType}}}_free({{{classname}}}->{{{name}}});
                {{/isModel}}
                {{#isUuid}}
                    ogs_free({{{classname}}}->{{{name}}});
                {{/isUuid}}
                {{#isEmail}}
                    ogs_free({{{classname}}}->{{{name}}});
                {{/isEmail}}
                {{#isFreeFormObject}}
                    object_free({{{classname}}}->{{{name}}});
                {{/isFreeFormObject}}
            {{/isEnum}}
        {{/isPrimitiveType}}
        {{#isPrimitiveType}}
            {{^isEnum}}
                {{#isString}}
                    ogs_free({{{classname}}}->{{{name}}});
                {{/isString}}
            {{/isEnum}}
            {{#isBinary}}
                ogs_free({{{classname}}}->{{{name}}}->data);
            {{/isBinary}}
            {{#isDate}}
                ogs_free({{{classname}}}->{{{name}}});
            {{/isDate}}
            {{#isDateTime}}
                ogs_free({{{classname}}}->{{{name}}});
            {{/isDateTime}}
        {{/isPrimitiveType}}
    {{/isContainer}}
    {{#isContainer}}
        {{#isListContainer}}
            {{#isPrimitiveType}}
                {{^isEnum}}
                    list_ForEach(listEntry, {{classname}}->{{name}}) {
                        ogs_free(listEntry->data);
                    }
                {{/isEnum}}
                list_free({{classname}}->{{name}});
            {{/isPrimitiveType}}
            {{^isPrimitiveType}}
                {{^isEnum}}
                    list_ForEach(listEntry, {{classname}}->{{name}}) {
                        {{complexType}}_free(listEntry->data);
                    }
                {{/isEnum}}
                list_free({{classname}}->{{name}});
            {{/isPrimitiveType}}
        {{/isListContainer}}
        {{#isMapContainer}}
            list_ForEach(listEntry, {{classname}}->{{name}}) {
                keyValuePair_t *localKeyValue = (keyValuePair_t*) listEntry->data;
                {{complexType}}_free(localKeyValue->value);
                ogs_free(localKeyValue);
            }
            list_free({{classname}}->{{name}});
        {{/isMapContainer}}
    {{/isContainer}}
{{/vars}}
    ogs_free({{classname}});
}

cJSON *{{classname}}_convertToJSON({{classname}}_t *{{classname}})
{
    cJSON *item = cJSON_CreateObject();
{{#vars}}
    {{#required}}
        if (!{{{classname}}}->{{{name}}}) {
            goto fail;
        }
    {{/required}}
    {{^required}}
        if ({{{classname}}}->{{{name}}}) {
    {{/required}}
    {{^isContainer}}
        {{#isPrimitiveType}}
            {{#isEnum}}
                if(cJSON_AddStringToObject(item, "{{{baseName}}}", {{{name}}}{{classname}}_ToString({{{classname}}}->{{{name}}})) == NULL) {
                    goto fail;
                }
            {{/isEnum}}
            {{^isEnum}}
                {{#isNumeric}}
                    if(cJSON_AddNumberToObject(item, "{{{baseName}}}", {{{classname}}}->{{{name}}}) == NULL) {
                        goto fail;
                    }
                {{/isNumeric}}
                {{#isBoolean}}
                    if(cJSON_AddBoolToObject(item, "{{{baseName}}}", {{{classname}}}->{{{name}}}) == NULL) {
                        goto fail;
                    }
                {{/isBoolean}}
                {{#isString}}
                if(cJSON_AddStringToObject(item, "{{{baseName}}}", {{{classname}}}->{{{name}}}) == NULL) {
                    goto fail;
                }
            {{/isString}}
            {{/isEnum}}
            {{#isByteArray}}
                if(cJSON_AddNumberToObject(item, "{{{baseName}}}", {{{classname}}}->{{{name}}}) == NULL) {
                    goto fail;
                }
            {{/isByteArray}}
            {{#isBinary}}
                char* encoded_str_{{{name}}} = base64encode({{{classname}}}->{{{name}}}->data,{{{classname}}}->{{{name}}}->len);
                if(cJSON_AddStringToObject(item, "{{{baseName}}}", encoded_str_{{{name}}}) == NULL) {
                    goto fail;
                }
                ogs_free(encoded_str_{{{name}}});
            {{/isBinary}}
            {{#isDate}}
                if(cJSON_AddStringToObject(item, "{{{baseName}}}", {{{classname}}}->{{{name}}}) == NULL) {
                    goto fail;
                }
            {{/isDate}}
            {{#isDateTime}}
                if(cJSON_AddStringToObject(item, "{{{baseName}}}", {{{classname}}}->{{{name}}}) == NULL) {
                    goto fail;
                }
            {{/isDateTime}}
        {{/isPrimitiveType}}
        {{^isPrimitiveType}}
            {{#isEnum}}
                if(cJSON_AddStringToObject(item, "{{{baseName}}}", {{{complexType}}}_ToString({{{classname}}}->{{{name}}})) == NULL) {
                    goto fail;
                }
            {{/isEnum}}
            {{^isEnum}}
                {{#isModel}}
                    cJSON *{{{name}}}_local_JSON = {{complexType}}{{#isFreeFormObject}}object{{/isFreeFormObject}}_convertToJSON({{{classname}}}->{{{name}}});
                    if({{{name}}}_local_JSON == NULL) {
                        goto fail;
                    }
                    cJSON_AddItemToObject(item, "{{{baseName}}}", {{{name}}}_local_JSON);
                    if(item->child == NULL) {
                        goto fail;
                    }
                {{/isModel}}
                {{#isUuid}}
                    if(cJSON_AddStringToObject(item, "{{{baseName}}}", {{{classname}}}->{{{name}}}) == NULL) {
                        goto fail;
                    }
                {{/isUuid}}
                {{#isEmail}}
                    if(cJSON_AddStringToObject(item, "{{{baseName}}}", {{{classname}}}->{{{name}}}) == NULL) {
                        goto fail;
                    }
                {{/isEmail}}
                {{#isFreeFormObject}}
                    cJSON *{{{name}}}_object = object_convertToJSON({{{classname}}}->{{{name}}});
                    if({{{name}}}_object == NULL) {
                        goto fail;
                    }
                    cJSON_AddItemToObject(item, "{{{baseName}}}", {{{name}}}_object);
                    if(item->child == NULL) {
                        goto fail;
                    }
                {{/isFreeFormObject}}
            {{/isEnum}}
        {{/isPrimitiveType}}
    {{/isContainer}}
    {{#isContainer}}
        {{#isListContainer}}
            {{#isPrimitiveType}}
                {{^isEnum}}
                    cJSON *{{{name}}} = cJSON_AddArrayToObject(item, "{{{baseName}}}");
                    if({{{name}}} == NULL) {
                        goto fail;
                    }

                    listEntry_t *{{{name}}}ListEntry;
                    list_ForEach({{{name}}}ListEntry, {{{classname}}}->{{{name}}}) {
                    {{#items}}
                        {{#isString}}
                            if(cJSON_AddStringToObject({{{name}}}, "", (char*){{{name}}}ListEntry->data) == NULL) {
                                goto fail;
                            }
                        {{/isString}}
                        {{#isBoolean}}
                            if(cJSON_AddBoolToObject({{{name}}}, "", *(cJSON_bool *){{{name}}}ListEntry->data) == NULL) {
                                goto fail;
                            }
                        {{/isBoolean}}
                        {{#isNumeric}}
                            if(cJSON_AddNumberToObject({{{name}}}, "", *(double *){{{name}}}ListEntry->data) == NULL) {
                                goto fail;
                            }
                        {{/isNumeric}}
                    {{/items}}
                    }
                {{/isEnum}}
            {{/isPrimitiveType}}
            {{^isPrimitiveType}}
                {{^isEnum}}
                    cJSON *{{{name}}} = cJSON_AddArrayToObject(item, "{{{baseName}}}");
                    if({{{name}}} == NULL) {
                        goto fail;
                    }

                    listEntry_t *{{{name}}}ListEntry;
                    if ({{{classname}}}->{{{name}}}) {
                        list_ForEach({{{name}}}ListEntry, {{classname}}->{{{name}}}) {
                            cJSON *itemLocal = {{complexType}}_convertToJSON({{#isEnum}}{{#items}}({{classVarName}}_{{name}}_e){{/items}}{{/isEnum}}{{{name}}}ListEntry->data);
                            if(itemLocal == NULL) {
                                goto fail;
                            }
                            cJSON_AddItemToArray({{{name}}}, itemLocal);
                        }
                    }
                {{/isEnum}}
                {{#isEnum}}
                    cJSON *{{{name}}} = cJSON_AddArrayToObject(item, "{{{baseName}}}");
                    if({{{name}}} == NULL) {
                        goto fail;
                    }
                    listEntry_t *{{{name}}}ListEntry;
                    list_ForEach({{{name}}}ListEntry, {{classname}}->{{{name}}}) {
                        if(cJSON_AddStringToObject({{{name}}}, "", {{{complexType}}}_ToString(({{{complexType}}}_e){{{name}}}ListEntry->data)) == NULL) {
                            goto fail;
                        }
                    }
                {{/isEnum}}
            {{/isPrimitiveType}}
        {{/isListContainer}}
        {{#isMapContainer}}
            cJSON *{{{name}}} = cJSON_AddObjectToObject(item, "{{{baseName}}}");
            if({{{name}}} == NULL) {
                goto fail;
            }
            cJSON *localMapObject = {{{name}}};
            listEntry_t *{{{name}}}ListEntry;
            if ({{{classname}}}->{{{name}}}) {
                list_ForEach({{{name}}}ListEntry, {{{classname}}}->{{{name}}}) {
                    keyValuePair_t *localKeyValue = (keyValuePair_t*){{{name}}}ListEntry->data;
                {{#isPrimitiveType}}
                    {{#isString}}
                    if(cJSON_AddStringToObject(localMapObject, localKeyValue->key, (char*)localKeyValue->value) == NULL) {
                        goto fail;
                    }
                    {{/isString}}
                    {{#isNumeric}}
                    if(cJSON_AddNumberToObject(localMapObject, localKeyValue->key, *(double *)localKeyValue->value) == NULL) {
                        goto fail;
                    }
                    {{/isNumeric}}
                    {{#isBoolean}}
                    if(cJSON_AddBoolToObject(localMapObject, localKeyValue->key, *(cJSON_bool *)localKeyValue->value) == NULL) {
                        goto fail;
                    }
                    {{/isBoolean}}
                {{/isPrimitiveType}}
                {{^isPrimitiveType}}
                    cJSON *itemLocal = {{complexType}}_convertToJSON(localKeyValue->value);
                    if (itemLocal == NULL) {
                        goto fail;
                    }
                    cJSON_AddItemToObject({{{name}}}, localKeyValue->key, itemLocal);
                {{/isPrimitiveType}}
                }
            }
        {{/isMapContainer}}
    {{/isContainer}}
    {{^required}}
       }
    {{/required}}

{{/vars}}
    return item;
fail:
    if (item) {
        cJSON_Delete(item);
    }
    return NULL;
}

{{classname}}_t *{{classname}}_parseFromJSON(cJSON *{{classname}}JSON)
{
    {{classname}}_t *{{classname}}_local_var = NULL;
{{#vars}}
    cJSON *{{{name}}} = cJSON_GetObjectItemCaseSensitive({{classname}}JSON, "{{{baseName}}}");
    {{#required}}
        if (!{{{name}}}) {
            goto end;
        }
    {{/required}}

    {{^isContainer}}
        {{#isPrimitiveType}}
            {{#isEnum}}
                {{classVarName}}_{{name}}_e {{name}}Variable;
                {{^required}}if ({{{name}}}) { {{/required}}
                if(!cJSON_IsString({{{name}}})) {
                    goto end;
                }
                {{name}}Variable = {{name}}{{classname}}_FromString({{{name}}}->valuestring);
            {{/isEnum}}
            {{^isEnum}}
                {{#isNumeric}}
                    {{^required}}if ({{{name}}}) { {{/required}}
                    if(!cJSON_IsNumber({{{name}}})) {
                        goto end;
                    }
                {{/isNumeric}}
                {{#isBoolean}}
                    {{^required}}if ({{{name}}}) { {{/required}}
                    if(!cJSON_IsBool({{{name}}})) {
                        goto end;
                    }
                {{/isBoolean}}
                {{#isString}}
                    {{^required}}if ({{{name}}}) { {{/required}}
                    if(!cJSON_IsString({{{name}}}))
                    {
                        goto end;
                    }
                {{/isString}}
            {{/isEnum}}
            {{#isByteArray}}
                {{^required}}if ({{{name}}}) { {{/required}}
                if(!cJSON_IsNumber({{{name}}})) {
                    goto end;
                }
            {{/isByteArray}}
            {{#isBinary}}
                binary_t* decoded_str_{{{name}}} = ogs_malloc(sizeof(struct binary_t));
                {{^required}}if ({{{name}}}) { {{/required}}
                if(!cJSON_IsString({{{name}}})) {
                    goto end;
                }
                decoded_str_{{{name}}}->data = base64decode({{{name}}}->valuestring, strlen({{{name}}}->valuestring), &decoded_str_{{{name}}}->len);
                if (!decoded_str_{{{name}}}->data) {
                    goto end;
                }
            {{/isBinary}}
            {{#isDate}}
                {{^required}}if ({{{name}}}) { {{/required}}
                if(!cJSON_IsString({{{name}}})) {
                    goto end;
                }
            {{/isDate}}
            {{#isDateTime}}
                {{^required}}if ({{{name}}}) { {{/required}}
                if(!cJSON_IsString({{{name}}})) {
                    goto end;
                }
            {{/isDateTime}}
        {{/isPrimitiveType}}
        {{^isPrimitiveType}}
            {{#isEnum}}
                {{complexType}}_e {{name}}Variable;
                {{^required}}if ({{{name}}}) { {{/required}}
                if(!cJSON_IsString({{{name}}})) {
                    goto end;
                }
                {{name}}Variable = {{complexType}}_FromString({{{name}}}->valuestring);
            {{/isEnum}}
            {{^isEnum}}
                {{#isModel}}
                    {{^isFreeFormObject}}{{complexType}}{{/isFreeFormObject}}{{#isFreeFormObject}}object{{/isFreeFormObject}}_t *{{name}}_local_nonprim = NULL;
                    {{^required}}if ({{{name}}}) { {{/required}}
                    {{{name}}}_local_nonprim = {{complexType}}{{#isFreeFormObject}}object{{/isFreeFormObject}}_parseFromJSON({{{name}}});
                {{/isModel}}
                {{#isUuid}}
                    {{^required}}if ({{{name}}}) { {{/required}}
                    if(!cJSON_IsString({{{name}}})) {
                        goto end;
                    }
                {{/isUuid}}
                {{#isEmail}}
                    {{^required}}if ({{{name}}}) { {{/required}}
                    if(!cJSON_IsString({{{name}}})) {
                        goto end;
                    }
                {{/isEmail}}
                {{#isFreeFormObject}}
                    object_t *{{name}}_local_object = NULL;
                    {{^required}}if ({{{name}}}) { {{/required}}
                    {{{name}}}_local_object = object_parseFromJSON({{{name}}});
                {{/isFreeFormObject}}
            {{/isEnum}}
        {{/isPrimitiveType}}
    {{/isContainer}}
    {{#isContainer}}
        {{#isListContainer}}
            {{#isPrimitiveType}}
                {{^isEnum}}
                    list_t *{{{name}}}List;
                    {{^required}}if ({{{name}}}) { {{/required}}
                    cJSON *{{{name}}}_local;
                    if(!cJSON_IsArray({{{name}}})) {
                        goto end;
                    }
                    {{{name}}}List = list_create();

                    cJSON_ArrayForEach({{{name}}}_local, {{{name}}}) {
                    {{#items}}
                        {{#isString}}
                            if(!cJSON_IsString({{{name}}}_local)) {
                                goto end;
                            }
                            list_addElement({{{name}}}List , ogs_strdup({{{name}}}_local->valuestring));
                        {{/isString}}
                        {{#isNumeric}}
                            if(!cJSON_IsNumber({{{name}}}_local)) {
                                goto end;
                            }
                            list_addElement({{{name}}}List , &{{{name}}}_local->valuedouble);
                        {{/isNumeric}}
                        {{#isBoolean}}
                            if(!cJSON_IsBool({{{name}}}_local)) {
                                goto end;
                            }
                            list_addElement({{{name}}}List , {{{name}}}_local->valueint);
                        {{/isBoolean}}
                    {{/items}}
                    }
                {{/isEnum}}
            {{/isPrimitiveType}}
            {{^isPrimitiveType}}
                {{^isEnum}}
                    list_t *{{{name}}}List;
                    {{^required}}if ({{{name}}}) { {{/required}}
                    cJSON *{{{name}}}_local_nonprimitive;
                    if(!cJSON_IsArray({{{name}}})){
                        goto end;
                    }

                    {{{name}}}List = list_create();

                    cJSON_ArrayForEach({{{name}}}_local_nonprimitive,{{{name}}} ) {
                        if(!cJSON_IsObject({{{name}}}_local_nonprimitive)) {
                            goto end;
                        }
                        {{#isEnum}}{{#items}}{{datatypeWithEnum}}_e {{/items}}{{/isEnum}}{{^isEnum}}{{complexType}}_t *{{/isEnum}}{{{name}}}Item = {{complexType}}_parseFromJSON({{{name}}}_local_nonprimitive);

                        list_addElement({{{name}}}List, {{#isEnum}}{{#items}}(void *){{/items}}{{/isEnum}}{{{name}}}Item);
                    }
                {{/isEnum}}
                {{#isEnum}}
                    list_t *{{{name}}}List;
                    {{^required}}if ({{{name}}}) { {{/required}}
                    cJSON *{{{name}}}_local_nonprimitive;
                    if(!cJSON_IsArray({{{name}}})) {
                        goto end;
                    }

                    {{{name}}}List = list_create();

                    cJSON_ArrayForEach({{{name}}}_local_nonprimitive, {{{name}}} ) {
                        if(!cJSON_IsString({{{name}}}_local_nonprimitive)){
                            goto end;
                        }

                        list_addElement({{{name}}}List, (void *){{{complexType}}}_FromString({{{name}}}_local_nonprimitive->valuestring));
                    }
                {{/isEnum}}
            {{/isPrimitiveType}}
        {{/isListContainer}}
        {{#isMapContainer}}
            list_t *{{{name}}}List;
            {{^required}}if ({{{name}}}) { {{/required}}
            cJSON *{{{name}}}_local_map;
            if(!cJSON_IsObject({{{name}}})) {
                goto end;
            }
            {{{name}}}List = list_create();
            keyValuePair_t *localMapKeyPair = NULL;
            cJSON_ArrayForEach({{{name}}}_local_map, {{{name}}}) {
                cJSON *localMapObject = {{{name}}}_local_map;
                {{#isPrimitiveType}}
                    {{#isString}}
                        if(!cJSON_IsString(localMapObject)) {
                            goto end;
                        }
                        localMapKeyPair = keyValuePair_create(ogs_strdup(localMapObject->string),ogs_strdup(localMapObject->valuestring));
                    {{/isString}}
                    {{#isBoolean}}
                        if(!cJSON_IsBool(localMapObject)) {
                            goto end;
                        }
                        localMapKeyPair = keyValuePair_create(ogs_strdup(localMapObject->string), &localMapObject->valueint);
                    {{/isBoolean}}
                    {{#isNumeric}}
                        if(!cJSON_IsNumber(localMapObject)) {
                            goto end;
                        }
                        localMapKeyPair = keyValuePair_create(ogs_strdup(localMapObject->string),&localMapObject->valuedouble );
                    {{/isNumeric}}
                {{/isPrimitiveType}}
                {{^isPrimitiveType}}
                    if(!cJSON_IsObject({{{name}}}_local_map)) {
                        goto end;
                    }
                    localMapKeyPair = keyValuePair_create(
                        localMapObject->string, {{complexType}}_parseFromJSON(localMapObject));
                {{/isPrimitiveType}}
                list_addElement({{{name}}}List , localMapKeyPair);
            }
        {{/isMapContainer}}
    {{/isContainer}}
    {{^required}}
    }
    {{/required}}

{{/vars}}
    {{classname}}_local_var = {{classname}}_create (
{{#vars}}
    {{^isContainer}}
        {{^isPrimitiveType}}
            {{#isEnum}}
                {{^required}}{{{name}}} ? {{/required}}{{{name}}}Variable{{^required}} : -1{{/required}}{{#hasMore}},{{/hasMore}}
            {{/isEnum}}
            {{^isEnum}}
                {{#isModel}}
                    {{^required}}{{{name}}} ? {{/required}}{{{name}}}_local_nonprim{{^required}} : NULL{{/required}}{{#hasMore}},{{/hasMore}}
                {{/isModel}}
                {{#isUuid}}
                    {{^required}}{{{name}}} ? {{/required}}ogs_strdup({{{name}}}->valuestring){{^required}} : NULL{{/required}}{{#hasMore}},{{/hasMore}}
                {{/isUuid}}
                {{#isEmail}}
                    {{^required}}{{{name}}} ? {{/required}}ogs_strdup({{{name}}}->valuestring){{^required}} : NULL{{/required}}{{#hasMore}},{{/hasMore}}
                {{/isEmail}}
                {{#isFreeFormObject}}
                    {{^required}}{{{name}}} ? {{/required}}{{{name}}}_local_object{{^required}} : NULL{{/required}}{{#hasMore}},{{/hasMore}}
                {{/isFreeFormObject}}
            {{/isEnum}}
        {{/isPrimitiveType}}
        {{#isPrimitiveType}}
            {{#isEnum}}
                {{^required}}{{{name}}} ? {{/required}}{{name}}Variable{{^required}} : -1{{/required}}{{#hasMore}},{{/hasMore}}
            {{/isEnum}}
            {{^isEnum}}
                {{#isNumeric}}
                    {{^required}}{{{name}}} ? {{/required}}{{{name}}}->valuedouble{{^required}} : 0{{/required}}{{#hasMore}},{{/hasMore}}
                {{/isNumeric}}
                {{#isBoolean}}
                    {{^required}}{{{name}}} ? {{/required}}{{{name}}}->valueint{{^required}} : 0{{/required}}{{#hasMore}},{{/hasMore}}
                {{/isBoolean}}
                {{#isString}}
                    {{^required}}{{{name}}} ? {{/required}}ogs_strdup({{{name}}}->valuestring){{^required}} : NULL{{/required}}{{#hasMore}},{{/hasMore}}
                {{/isString}}
            {{/isEnum}}
            {{#isByteArray}}
                {{^required}}{{{name}}} ? {{/required}}{{{name}}}->valueint{{^required}} : 0{{/required}}{{#hasMore}},{{/hasMore}}
            {{/isByteArray}}
            {{#isBinary}}
                {{^required}}{{{name}}} ? {{/required}}decoded_str_{{{name}}}{{^required}} : NULL{{/required}}{{#hasMore}},{{/hasMore}}
            {{/isBinary}}
            {{#isDate}}
                {{^required}}{{{name}}} ? {{/required}}ogs_strdup({{{name}}}->valuestring){{^required}} : NULL{{/required}}{{#hasMore}},{{/hasMore}}
            {{/isDate}}
            {{#isDateTime}}
                {{^required}}{{{name}}} ? {{/required}}ogs_strdup({{{name}}}->valuestring){{^required}} : NULL{{/required}}{{#hasMore}},{{/hasMore}}
            {{/isDateTime}}
        {{/isPrimitiveType}}
    {{/isContainer}}
    {{#isContainer}}
        {{#isListContainer}}
            {{^required}}{{{name}}} ? {{/required}}{{{name}}}List{{^required}} : NULL{{/required}}{{#hasMore}},{{/hasMore}}
        {{/isListContainer}}
        {{#isMapContainer}}
            {{^required}}{{{name}}} ? {{/required}}{{{name}}}List{{^required}} : NULL{{/required}}{{#hasMore}},{{/hasMore}}
        {{/isMapContainer}}
    {{/isContainer}}
{{/vars}}
        );

    return {{classname}}_local_var;
end:
    return NULL;
}
{{/isEnum}}
{{/model}}{{/models}}
